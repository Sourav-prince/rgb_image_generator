const getColorBitByPixels = (resolution) => {
  for(let i = 1; i<=16;i++){
    let pow = Math.pow(2,i)
    if( pow*pow*pow === resolution ){
      return i
    }
  }
  return 0
}

/**
 * Returns a object with all RGB combinations with cordinate values.
 * @description to generate 256x128 image we need
 * 15-bit colors are the 32768 colors that can be made by mixing 32 reds, 32 greens and 32 blues.
 * 24-bit images range is 0 to 255 per channel. so divide that range to 32 components.
 * array of [x,y,r,g,b] is a set of permutation possible.
 * alot of different variations can be generated by altering draw order.
 * 
 * @param {number} resolution Total pixels by multiplying height & width.
 * @param {number} width width of image to be genrated.
 * @return {object} object with [x,y,r,g,b] values to render canvas.
 */
const generateImageMap = (resolution, width) => {
  let paint = []
  let rgbValues = []
  let currentColorBit = getColorBitByPixels(resolution)
  let offsetMax = width - Math.pow(2,8-currentColorBit)
  let redRepeatations = 3
  let greenRepeatations = 2
  let blueRepeatations = 7

  for (let i = 0; i < resolution; i++) {
    let x = i & width - 1;
    let y = (i / width | 0);
    let r = i << redRepeatations & offsetMax;
    let g = i >> greenRepeatations & offsetMax;
    let b = i >> blueRepeatations & offsetMax;
    paint.push([x,y,r,g,b])
    rgbValues.push(`${r}-${g}-${b}`)
  }

  return {
    paint,
    rgbValues
  }
}

const sleep = (ms) => new Promise(r => setTimeout(r,ms))

export {
  generateImageMap,
  sleep
}